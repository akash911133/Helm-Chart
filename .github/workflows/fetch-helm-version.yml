name: Helm Chart Update Check

on:
  push:
    branches:
      - optimized

env:
  HELM_PACKAGE_VERSION: 'v3.12.0'
  HELM_S3_PLUGIN_VERSION: 'v0.13.0'
  UPDATE_NEEDED: 'false'
  V_Version: 'false'

jobs:
  helm-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Helm
        run: |
          wget "https://get.helm.sh/helm-${{ env.HELM_PACKAGE_VERSION }}-linux-amd64.tar.gz"
          tar -xzvf "helm-${{ env.HELM_PACKAGE_VERSION }}-linux-amd64.tar.gz"
          sudo mv linux-amd64/helm /usr/local/bin/helm

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install jq -y

      - name: Check and Update Helm chart versions
        id: check-versions
        run: |
          echo "V_Version=false" >> $GITHUB_ENV
          # Extract charts from JSON
          charts=$(jq -c '.charts[]' akash.json)

          for chart in $charts; do
              chart_name=$(echo "$chart" | jq -r '.chart')
              repository=$(echo "$chart" | jq -r '.repository')
              version=$(echo "$chart" | jq -r '.version')

              echo "Checking chart: $chart_name"
              echo "Repository: $repository"
              echo "Current Version: $version"

              # Add Helm repo if not already added
              helm repo add "$chart_name" "$repository"

              # Update Helm repo
              helm repo update

              # Get the latest version available
              latest_version=$(helm search repo "$chart_name/$chart_name" --versions | grep -oP '\d+\.\d+\.\d+' | head -n 1)

              # Normalize version format (remove 'v' prefix if present)
              if [[ "$version" == v* ]]; then
                version=$(echo "$version" | sed 's/v//')
                latest_version=$(echo "$latest_version" | sed 's/v//')
                echo "V_Version=true" >> $GITHUB_ENV
              fi

              # Compare versions and update if needed
              if dpkg --compare-versions "$version" lt "$latest_version"; then
                  echo -e "\n\033[34mVersion update needed for $chart_name. Current version: $version, Latest version: $latest_version\033[0m\n"
                  echo "UPDATE_NEEDED=true" >> $GITHUB_ENV

                  # Update input.tf file
                  if [[ "${{ env.V_Version }}" = "true" ]]; then
                    sed -i '/"'$chart_name'"/{n;s/"'v$version'"/"'v$latest_version'"/}' Terraform/input.tf
                  else
                    sed -i '/"'$chart_name'"/{n;s/"'$version'"/"'$latest_version'"/}' Terraform/input.tf
                  fi

              # Debug: Show input.tf after update
              echo "input.tf after update:"
              cat Terraform/input.tf

              # Configure Git
              # git config --global user.name 'github-actions[bot]'
              # git config --global user.email 'github-actions[bot]@users.noreply.github.com'

              # # Create a new branch for the update
              # git checkout -b "update-helm-version-$chart_name"

              # # Stage and commit changes
              # git add  Terraform/input.tf
              # git commit -m "Update Helm chart version for $chart_name to $latest_version"
              # git push origin HEAD:"update-helm-version-$chart_name"

              # # Extract the commit hash for the push
              # COMMIT_HASH=$(git rev-parse HEAD)

              # # Create a pull request using GitHub REST API
              # curl -ss -X POST \
              #   -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              #   -H "Accept: application/vnd.github.v3+json" \
              #   https://api.github.com/repos/${{ github.repository }}/pulls \
              #   -d '{
              #     "title": "Update Helm chart version for '"$chart_name"'",
              #     "body": "This PR updates Helm chart '"$chart_name"' version to '"$latest_version"'.",
              #     "head": "update-helm-version-'$chart_name'",
              #     "base": "optimized"
              #   }'

              # # Reset the repository to the original state
              # git reset --hard origin/optimized


              else
                  echo "No update needed for $chart_name. Current version: $version"
              fi
          done
