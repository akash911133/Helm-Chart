name: Helm Chart Update Check

on:
  push:
    branches:
      - optimized

env:
  HELM_PACKAGE_VERSION: 'v3.12.0'
  HELM_S3_PLUGIN_VERSION: 'v0.13.0'
  UPDATE_NEEDED: 'false'

jobs:
  helm-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Helm
        run: |
          wget "https://get.helm.sh/helm-${{ env.HELM_PACKAGE_VERSION }}-linux-amd64.tar.gz"
          tar -xzvf "helm-${{ env.HELM_PACKAGE_VERSION }}-linux-amd64.tar.gz"
          sudo mv linux-amd64/helm /usr/local/bin/helm

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install jq -y

      - name: Check and Update Helm chart versions
        id: check-versions
        run: |
          # Extract charts from JSON
          charts=$(jq -c '.charts[]' akash.json)

          for chart in $charts; do
              chart_name=$(echo "$chart" | jq -r '.chart')
              repository=$(echo "$chart" | jq -r '.repository')
              version=$(echo "$chart" | jq -r '.version')

              echo "Checking chart: $chart_name"
              echo "Repository: $repository"
              echo "Current Version: $version"

              # Add Helm repo if not already added
              helm repo add "$chart_name" "$repository"

              # Update Helm repo
              helm repo update

              # Get the latest version available
              latest_version=$(helm search repo "$chart_name/$chart_name" --versions | grep -oP '\d+\.\d+\.\d+' | head -n 1)

              # Normalize version format (remove 'v' prefix if present)
              if [[ "$chart_name" == v* ]]; then
                version=$(echo "$version" | sed 's/^v//' )
                if dpkg --compare-versions "$version" lt "$latest_version"; then
                  echo -e "\n\033[34mVersion update needed for $chart_name. Current version: $version, Latest version: $latest_version\033[0m\n"
                  echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
                  # Update input.tf file
                  sed -i '/"'$chart_name'"/{n;s/"'v$version'"/"'v$latest_version'"/}' Terraform/input.tf
                fi
                break
              fi

              # Compare versions and update if needed
              if dpkg --compare-versions "$version" lt "$latest_version"; then
                  echo -e "\n\033[34mVersion update needed for $chart_name. Current version: $version, Latest version: $latest_version\033[0m\n"
                  echo "UPDATE_NEEDED=true" >> $GITHUB_ENV

                  # Update input.tf file
                  sed -i '/"'$chart_name'"/{n;s/"'$version'"/"'$latest_version'"/}' Terraform/input.tf
              else
                  echo "No update needed for $chart_name. Current version: $version"
              fi
          done
